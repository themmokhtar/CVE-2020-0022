#pragma once

#include "errors.h"

#include <stddef.h>
#include <stdbool.h>

// // [calculated from https://android.googlesource.com/platform/system/bt/+/refs/tags/android-9.0.0_r49/stack/include/bt_types.h#224]
// #define BLUETOOTH_BT_HDR_SIZE (8)

// L2CAP command codes [copied from https://android.googlesource.com/platform/system/bt/+/refs/tags/android-9.0.0_r49/stack/include/l2cdefs.h#22]
#define BLUETOOTH_L2CAP_CMD_REJECT 0x01
#define BLUETOOTH_L2CAP_CMD_CONN_REQ 0x02
#define BLUETOOTH_L2CAP_CMD_CONN_RSP 0x03
#define BLUETOOTH_L2CAP_CMD_CONFIG_REQ 0x04
#define BLUETOOTH_L2CAP_CMD_CONFIG_RSP 0x05
#define BLUETOOTH_L2CAP_CMD_DISC_REQ 0x06
#define BLUETOOTH_L2CAP_CMD_DISC_RSP 0x07
#define BLUETOOTH_L2CAP_CMD_ECHO_REQ 0x08
#define BLUETOOTH_L2CAP_CMD_ECHO_RSP 0x09
#define BLUETOOTH_L2CAP_CMD_INFO_REQ 0x0A
#define BLUETOOTH_L2CAP_CMD_INFO_RSP 0x0B
#define BLUETOOTH_L2CAP_CMD_AMP_CONN_REQ 0x0C
#define BLUETOOTH_L2CAP_CMD_AMP_CONN_RSP 0x0D
#define BLUETOOTH_L2CAP_CMD_AMP_MOVE_REQ 0x0E
#define BLUETOOTH_L2CAP_CMD_AMP_MOVE_RSP 0x0F
#define BLUETOOTH_L2CAP_CMD_AMP_MOVE_CFM 0x10
#define BLUETOOTH_L2CAP_CMD_AMP_MOVE_CFM_RSP 0x11
#define BLUETOOTH_L2CAP_CMD_BLE_UPDATE_REQ 0x12
#define BLUETOOTH_L2CAP_CMD_BLE_UPDATE_RSP 0x13
#define BLUETOOTH_L2CAP_CMD_BLE_CREDIT_BASED_CONN_REQ 0x14
#define BLUETOOTH_L2CAP_CMD_BLE_CREDIT_BASED_CONN_RES 0x15
#define BLUETOOTH_L2CAP_CMD_BLE_FLOW_CTRL_CREDIT 0x16

// [similar to https://android.googlesource.com/platform/system/bt/+/refs/tags/android-9.0.0_r49/hci/src/packet_fragmenter.cc#39]
#define BLUETOOTH_HCI_HANDLE_VALUE_MASK 0x0FFF
#define BLUETOOTH_HCI_HANDLE_FLAGS_MASK 0xF000

// [copied from https://android.googlesource.com/platform/system/bt/+/refs/tags/android-9.0.0_r49/hci/src/packet_fragmenter.cc#40]
#define BLUETOOTH_HCI_START_PACKET_BOUNDARY 2
#define BLUETOOTH_HCI_CONTINUATION_PACKET_BOUNDARY 1

// ACL Data from HCI [copied from https://android.googlesource.com/platform/system/bt/+/refs/tags/android-9.0.0_r49/stack/include/bt_types.h#70]
#define BLUETOOTH_BT_EVT_TO_BTU_HCI_ACL 0x1100

struct bluetooth_bt_header
{
    uint16_t event;
    uint16_t len;
    uint16_t offset;
    uint16_t layer_specific;
};

struct bluetooth_hci_header
{
    uint16_t handle;
    uint16_t len;
};

struct bluetooth_acl_header
{
    uint16_t len;
    uint16_t cid;
};

struct bluetooth_l2cap_header
{
    uint8_t code;
    uint8_t identifier;
    uint16_t len;
    uint8_t data[0];
};

struct bluetooth_header
{
    struct bluetooth_hci_header hci_header;
    struct bluetooth_acl_header acl_header;
    struct bluetooth_l2cap_header l2cap_header;
};

struct bluetooth_remote_header
{
    struct bluetooth_bt_header bt_header;
    struct bluetooth_hci_header hci_header;
    struct bluetooth_acl_header acl_header;
    struct bluetooth_l2cap_header l2cap_header;
};

err_t bluetooth_hci_create(int *hci_sock_fd);
err_t bluetooth_remote_header_spoof(const uint16_t hci_handle, const uint8_t packet_id, const uint16_t continuation_size, const bool is_continuation, const uint16_t data_size, struct bluetooth_remote_header *const header);
err_t bluetooth_hci_header_spoof(const uint16_t hci_handle, const uint8_t packet_id, const uint16_t continuation_size, const bool is_continuation, const uint16_t data_size, struct bluetooth_header *const header);
err_t bluetooth_hci_packet_send(const int hci_sock_fd, struct bluetooth_header header, uint8_t *data, const uint16_t data_size);
err_t bluetooth_hci_packet_spoof_send(const int hci_sock_fd, const uint16_t hci_handle, const uint8_t packet_id, const uint16_t continuation_size, const bool is_continuation, uint8_t *data, const uint16_t data_size);

err_t bluetooth_l2cap_create(int *l2cap_sock_fd);
err_t bluetooth_l2cap_connect(const int l2cap_sock_fd, const char *bdaddr_str, uint16_t *hci_handle);
err_t bluetooth_l2cap_recv(const int l2cap_sock_fd, uint8_t *buffer, size_t buffer_max_size, size_t *read_amount);
err_t bluetooth_l2cap_recv_packet(const int l2cap_sock_fd, struct bluetooth_l2cap_header **const packet);
err_t bluetooth_l2cap_recv_packet_id(const int l2cap_sock_fd, struct bluetooth_l2cap_header **const packet, const uint8_t packet_id);

err_t bluetooth_inc_packet_id(uint8_t *const packet_id);
