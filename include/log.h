#pragma once

#include <stdio.h>
#include <string.h>
#include <inttypes.h>

#define KBLD "\x1B[1m"
#define KNRM "\x1B[0m"
#define KRED "\x1B[31m"
#define KGRN "\x1B[32m"
#define KYEL "\x1B[33m"
#define KBLU "\x1B[34m"
#define KMAG "\x1B[35m"
#define KCYN "\x1B[36m"
#define KWHT "\x1B[37m"

#define KBLD "\x1B[1m"
#define KUDL "\x1B[4m"
#define KBLK "\x1B[5m"

// Levels:
// 0- NOTHING
// 1- ERROR INCLUDED
// 2- SUCCESS INCLUDED
// 3- WARNING INCLUDED
// 4- INFO INCLUDED
// 5- DBG_INFO INCLUDED
extern int log_level;
extern char log_name[];

// #define PRINTF_LEVEL(LEVEL, COL1, COL2, COL3, FORMAT, ...)
//     {
//         if (log_level >= LEVEL)
//         {
//             printf(KNRM COL2 FORMAT COL3, ##__VA_ARGS__);
//             if (FORMAT[strlen(FORMAT) - 1] == '\n')
//                 fflush(stdout);
//         }
//     }

// #define GENERIC_PRINT(LEVEL, COL1, COL2, COL3, FORMAT, ...)
//     {
//         if (log_level >= LEVEL)
//         {
//             printf(KBLD "%s:" KNRM " " COL1 "[*] " KNRM COL2 FORMAT COL3, log_name, ##__VA_ARGS__);
//             if (FORMAT[strlen(FORMAT) - 1] == '\n')
//                 fflush(stdout);
//         }
//     }

#define PRINTF_LEVEL(LEVEL, COL1, COL2, COL3, FORMAT, ...) \
    {                                                      \
        if (log_level >= LEVEL)                            \
        {                                                  \
            printf(KNRM COL2 FORMAT COL3, ##__VA_ARGS__);  \
            fflush(stdout);                                \
        }                                                  \
    }

#define GENERIC_PRINT(LEVEL, COL1, COL2, COL3, FORMAT, ...)                                         \
    {                                                                                               \
        if (log_level >= LEVEL)                                                                     \
        {                                                                                           \
            printf(KBLD "%s:" KNRM " " COL1 "[*] " KNRM COL2 FORMAT COL3, log_name, ##__VA_ARGS__); \
            fflush(stdout);                                                                         \
        }                                                                                           \
    }

#define LOGL_CLEAR(...)     \
    {                       \
        printf("\r\x1B[K"); \
        fflush(stdout);     \
    }

#define LOGL_ERROR(...) GENERIC_PRINT(1, KBLD KRED, KBLD KRED, KNRM, __VA_ARGS__)
#define LOG_ERROR(...) PRINTF_LEVEL(1, KBLD KRED, KBLD KRED, KNRM, __VA_ARGS__)
#define LOGL_SUCCESS(...) GENERIC_PRINT(2, KBLD KGRN, KUDL KBLD KGRN, KNRM, __VA_ARGS__)
#define LOG_SUCCESS(...) PRINTF_LEVEL(2, KBLD KGRN, KUDL KBLD KGRN, KNRM, __VA_ARGS__)
#define LOGL_WARNING(...) GENERIC_PRINT(3, KBLD KYEL, KBLD KYEL, KNRM, __VA_ARGS__)
#define LOG_WARNING(...) PRINTF_LEVEL(3, KBLD KYEL, KBLD KYEL, KNRM, __VA_ARGS__)
#define LOGL_INFO(...) GENERIC_PRINT(4, KBLD KCYN, KBLD KCYN, KNRM, __VA_ARGS__)
#define LOG_INFO(...) PRINTF_LEVEL(4, KBLD KCYN, KBLD KCYN, KNRM, __VA_ARGS__)
#define LOGL_DBG_INFO(...) GENERIC_PRINT(5, KBLD KMAG, KMAG, KNRM, __VA_ARGS__)
#define LOG_DBG_INFO(...) PRINTF_LEVEL(5, KBLD KMAG, KMAG, KNRM, __VA_ARGS__)

#define LOGL_DBG_VAR(var, format) LOGL_DBG_INFO("LOGL_DBG_VAR => %s:%u, in %s: %s = " format "\n", __FILE__, __LINE__, __func__, #var, var);

void logl_hex(const uint8_t *buffer, int size);

// #define LOG_BLACK "\x1b[30m"
// #define LOG_RED "\x1b[31m"
// #define LOG_GREEN "\x1b[32m"
// #define LOG_YELLOW "\x1b[33m"
// #define LOG_BLUE "\x1b[34m"
// #define LOG_MAGENTA "\x1b[35m"
// #define LOG_CYAN "\x1b[36m"
// #define LOG_WHITE "\x1b[37m"
// #define LOG_NORMAL "\x1b[m"

// #define LOG_INFO(fmt, ...) printf(LOG_CYAN "[INFO] " fmt LOG_NORMAL "\n", ##__VA_ARGS__)

// #undef LOG_BLACK
// #undef LOG_RED
// #undef LOG_GREEN
// #undef LOG_YELLOW
// #undef LOG_BLUE
// #undef LOG_MAGENTA
// #undef LOG_CYAN
// #undef LOG_WHITE
// #undef LOG_NORMAL
