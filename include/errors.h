#pragma once

#include <errno.h>
#include <stdint.h>

#define ERR_RET(name, message) return err_create(name, __FILE__, __func__, __LINE__, message, 0, NULL);
#define ERR_RET_SYS(name, message) return err_create(name, __FILE__, __func__, __LINE__, message, errno, NULL);
#define ERR_FWD_MSG(message, err)                                                           \
    {                                                                                       \
        err_t _err = (err);                                                                 \
        if (_err)                                                                           \
            return err_create("FORWARDED", __FILE__, __func__, __LINE__, message, 0, _err); \
    }
#define ERR_FWD(err) ERR_FWD_MSG(NULL, err)

typedef struct err_info *err_t;

struct err_info
{
    const char *name;
    const char *filename;
    const char *function;
    uint32_t line;

    char *message;
    int error_no;

    struct err_info *parent;
};

err_t err_create(const char *name, const char *filename, const char *function, uint32_t line, char *message, int error_no, struct err_info *parent);
err_t err_root(err_t err);

void err_print(err_t err);
void err_free(err_t err);
void err_print_free(err_t err);