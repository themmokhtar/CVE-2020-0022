First, we try to find an optimal dispatcher gadget:
/\* add x..?,x..?,#0x[0-9a-z]+; bl?r x..?; \*/

#define JOPPENHEIMER_GADGET_18044 ((uint64_t)0x000b53a4) /* add x8,x27,#0x10; blr x8; */
#define JOPPENHEIMER_GADGET_30044 ((uint64_t)0x000f7da0) /* add x8,x19,#0x10; blr x8; */

And.... We found nothing, but above are two nice candidates (and there are a few more).

Next, we try to find a one-gadget dispatcher that has a side-effect or two:
/\* add x..?,x..?,#0x[0-9a-z]+; [^;]+; bl?r x..?; \*/

The above search found too many candidates, so we limit our search to x8:
/\* add x8,x8,#0x[0-9a-z]+; [^;]+; bl?r x8; \*/
No good candidates were found.

Next, we try to find a one-gadget dispatcher that uses ldr:
/\* ldr x..?,\[x..?, #0x[0-9a-z]+\]!; bl?r x8; \*/
/\* ldr x..?,\[x..?, #0x[0-9a-z]+\]!; [^;]+; bl?r x8; \*/

#define JOPPENHEIMER_GADGET_46778 ((uint64_t)0x00167c1c) /* ldr x8,[x1, #0x8]!; mov x1,x19; blr x8; */
#define JOPPENHEIMER_GADGET_29288 ((uint64_t)0x000f1950) /* ldr x1,[x22, #0x10]!; mov x23,x0; blr x8; */
#define JOPPENHEIMER_GADGET_29298 ((uint64_t)0x000f19cc) /* ldr x1,[x22, #0x10]!; mov x23,x0; blr x8; */
#define JOPPENHEIMER_GADGET_46778 ((uint64_t)0x00167c1c) /* ldr x8,[x1, #0x8]!; mov x1,x19; blr x8; */

Next, we try to find a two-gadget dispatcher (as explained during the CAE Talk: An Introduction to Jump-Oriented Programming: An Alternative Code-Reuse Attack).
To find the first gadget:
/\* add x..?,x..?,#0x[0-9a-z]+; bl?r x.; \*/
#define JOPPENHEIMER_GADGET_30224 ((uint64_t)0x000fac54) /* add x20,x20,#0x38; blr x8; */
#define JOPPENHEIMER_GADGET_30559 ((uint64_t)0x000fc1c4) /* add x27,x27,#0x1; blr x8; */
#define JOPPENHEIMER_GADGET_30584 ((uint64_t)0x000fc3b0) /* add x25,x25,#0x1; blr x8; */
#define JOPPENHEIMER_GADGET_33074 ((uint64_t)0x001107c0) /* add x22,x22,#0x48; blr x8; */

/\* bl?r x8; \*/
