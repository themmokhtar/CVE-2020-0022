// This is a complimentary script to the CVE-2020-0022 exploit. It is used to extract the ASLR leak offsets from the libandroid_runtime.so binary.
// @author @themmokhtar
// @category CVE-2020-0022
// @keybinding 
// @menupath 
// @toolbar 

// import javax.xml.stream.events.Namespace;

import java.util.ArrayList;

import ghidra.app.script.GhidraScript;
import ghidra.program.model.mem.*;
import ghidra.program.model.lang.*;
import ghidra.program.model.pcode.*;
import ghidra.program.model.util.*;
import ghidra.program.model.reloc.*;
import ghidra.program.model.data.*;
import ghidra.program.model.block.*;
import ghidra.program.model.symbol.*;
import ghidra.program.model.scalar.*;
import ghidra.program.model.listing.*;
import ghidra.program.model.address.*;

public class Jopperhimer extends GhidraScript {
    public static final int MAX_GADGET_LENGTH = 6;

    public void run() throws Exception {
        Program program = getCurrentProgram();

        ArrayList<Instruction[]> gadgets = new ArrayList<Instruction[]>();
        InstructionIterator instrIter = program.getListing().getInstructions(true);

        while (instrIter.hasNext() && !monitor.isCancelled()) {
            Instruction instr = instrIter.next();
            String mnemonic = instr.getMnemonicString();

            // Check if the instruction is a br or blr
            if (mnemonic.equals("br") || mnemonic.equals("blr")) {
                // Get all the gadgets that end with this instruction
                for (int i = MAX_GADGET_LENGTH; i > 1; i--) {
                    Instruction[] gadget = new Instruction[i];
                    gadget[i - 1] = instr;
                    for (int j = i - 2; j >= 0; j--) {
                        gadget[j] = gadget[j + 1].getNext();
                    }

                    gadgets.add(gadget);
                }
            }
        }

        StringBuilder headerCode = new StringBuilder();
        headerCode.append("// Autogenerated by Jopperhimer - Do not modify\n\n");
        headerCode.append("#pragma once\n\n");
        headerCode.append("#include <stdint.h>\n\n");

        int counter = 0;
        for (Instruction[] gadget : gadgets) {
            headerCode.append("#define JOPPERHEIMER_GADGET_");
            headerCode.append(counter++);
            headerCode.append(" ((uint64_t)0x");
            headerCode.append(gadget[0].getAddress().toString());
            headerCode.append(") /* ");
            for (Instruction instr : gadget) {
                headerCode.append(instr.toString());
                headerCode.append("; ");
            }
            headerCode.append("*/\n");
        }

        java.io.File file = askFile("Select the .h file to save the code to", "Save");
        java.io.PrintWriter writer = new java.io.PrintWriter(file);
        writer.println(headerCode);
        writer.close();
    }
}
